List<String> list = <String>['Selecionar', 'One', 'Two', 'Three', 'Four'];

String dropdownValue = list.first;

Container(
                        width: 180,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(5.0),
                          color: ColorSchemeManagerClass.colorPrimary,
                        ),
                        child: DropdownMenu<String>(
                          enableSearch: false,
                          enableFilter: false,
                          width: 187,
                          initialSelection: dropdownValue,
                          onSelected: (String? value) {
                            setState(() {
                              dropdownValue = value!;
                            });
                          },
                          dropdownMenuEntries: list.map<DropdownMenuEntry<String>>((String value) {
                            return DropdownMenuEntry<String>(
                              value: value,
                              label: value,
                              style: MenuItemButton.styleFrom(foregroundColor: ColorSchemeManagerClass.colorWhite),
                            );
                          }).toList(),
                          textStyle: TextStyle(
                            color: ColorSchemeManagerClass.colorWhite,
                          ),
                          selectedTrailingIcon: Icon(
                            Icons.arrow_drop_down,
                            color: ColorSchemeManagerClass.colorWhite,
                          ),
                          trailingIcon: Icon(
                            Icons.arrow_drop_down,
                            color: ColorSchemeManagerClass.colorWhite,
                          ),
                          menuStyle: MenuStyle(
                            backgroundColor: WidgetStatePropertyAll(ColorSchemeManagerClass.colorPrimary),
                          ),
                        ),
                      ),












                 void _sendData() {
    final String nome = nameController.text;
    final String email = emailController.text;
    final String cpf = cpfController.text;
    final String rg = rgController.text;
    final String celular = celularController.text;
    final String endereco = enderecoController.text;
    final String numero = numeroController.text;
    final String bairro = bairroController.text;
    final String cidade = cidadeController.text;
    final String uf = ufController.text;
    final String cep = cepController.text;
    final String complemento = complementoController.text;
    final String doencaCronica = diseaseController.text == '' ? 'Não informado' : diseaseController.text;
    final String doencaGrave = seriousIllnessController.text == '' ? 'Não informado' : seriousIllnessController.text;
    final String cirurgia = surgeryController.text == '' ? 'Não informado' : surgeryController.text;
    final String problemasRespiratorios = respiratoryController.text == '' ? 'Não informado' : respiratoryController.text;
    final String reacaoAlergicaSevera = allergicReactionController.text == '' ? 'Não informado' : allergicReactionController.text;
    final String vacinas = vaccineController.text == '' ? 'Não informado' : vaccineController.text;
    final String acompanhamentoMedico = medicalMonitoringController.text == '' ? 'Não informado' : medicalMonitoringController.text;
    final String medicamentoPeriodico = dailyMedicationController.text == '' ? 'Não informado' : dailyMedicationController.text;
    final String medicamentosEmergenciais = emergencyMedicationController.text == '' ? 'Não informado' : emergencyMedicationController.text;
    final String nomeParentesco = emergencyNameController.text == '' ? 'Não informado' : emergencyNameController.text;
    final String restricaoAlimentar = dietaryRestrictionController.text == '' ? 'Não informado' : dietaryRestrictionController.text;
    final int telefone = emergencyPhoneController.value.text == '' ? 00000000000 : int.parse(emergencyPhoneController.text);
    final String parentesco = emergencyParentescoController.text == '' ? 'Não informado' : emergencyParentescoController.text;
    final String qualPlano = healthPlanController.text == '' ? 'Não informado' : healthPlanController.text;
    final String alergia = allergyController.text == '' ? 'Não informado' : allergyController.text;
    createResponsible(
      cep: cep,
      nome: nome,
      email: email,
      cpf: cpf,
      rg: rg,
      celular: celular,
      endereco: endereco,
      numero: numero,
      bairro: bairro,
      cidade: cidade,
      uf: uf,
      complemento: complemento,
    );
    createAnaminese(
      acompanhamentoMedico: acompanhamentoMedico,
      alergia: alergia,
      cirurgia: cirurgia,
      doencaCronica: doencaCronica,
      doencaGrave: doencaGrave,
      medicamentoPeriodico: medicamentoPeriodico,
      medicamentosEmergenciais: medicamentosEmergenciais,
      nomeParentesco: nomeParentesco,
      parentesco: parentesco,
      problemasRespiratorios: problemasRespiratorios,
      reacaoAlergicaSevera: reacaoAlergicaSevera,
      restricaoAlimentar: restricaoAlimentar,
      telefone: telefone,
      qualPlano: qualPlano,
      vacinas: vacinas
      );
  }     


  final response = await _client
          .from('aluno')
          .select('id_aluno') // Seleciona apenas o campo id_aluno
          .eq('cpf', cpf)
          .single(); // Retorna apenas um resultado